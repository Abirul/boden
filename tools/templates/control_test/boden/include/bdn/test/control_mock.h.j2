#ifndef BDN_TEST_Mock{{name}}Core_H_
#define BDN_TEST_Mock{{name}}Core_H_


#include <bdn/test/MockViewCore.h>

#include <bdn/I{{name}}Core.h>
#include <bdn/{{name}}.h>

namespace bdn
{
namespace test
{


/** Implementation of a "fake" {{name}} core that does not actually show anything
    visible, but behaves otherwise like a normal {{name}} core.
    
    See MockUiProvider.
    */
class Mock{{name}}Core : public MockViewCore, BDN_IMPLEMENTS I{{name}}Core
{
public:
	Mock{{name}}Core({{name}}* p{{name}})
		: MockViewCore(p{{name}})
	{
		// TODO: init properties here, e.g.
		//_label = p{{name}}->label();		
	}

	// Implement getters, setters + change count, e.g.:

    /*String getLabel() const
	{
	    return _label;
	}

    int getLabelChangeCount() const
	{
	    return _labelChangeCount;
    }
	
	void setLabel(const String& label) override
	{
		_label = label;
		_labelChangeCount++;
	}*/


	// TODO: implement size calculation, e.g.:

	/*Size calcPreferredSize( const Size& availableSpace = Size::none() ) const override
	{
        MockViewCore::calcPreferredSize(availableSpace);

		BDN_REQUIRE_IN_MAIN_THREAD();

		Size size = _getTextSize(_label);

        

        // add our padding
        P<View> pView = getOuterViewIfStillAttached();
        if(pView!=nullptr)
        {
            if(!pView->padding().get().isNull())
                size += uiMarginToDipMargin(pView->padding().get());
        }

        // add some space for the fake {{name}} border
		size += Margin( 4, 5);

        // ignore available space. We have a fixed size.
        
        if(pView!=nullptr)
        {            
            // clip to min and max size
            size.applyMinimum( pView->preferredSizeMinimum() );
            size.applyMaximum( pView->preferredSizeMaximum() );
        }

		return size;
	}*/
	
	// TODO: implement events, e.g.:

	/*void generateClick()
	{
        P<View> pView = getOuterViewIfStillAttached();
        if(pView!=nullptr)
        {
		    ClickEvent evt(pView);

		    cast<{{name}}>(pView)->onClick().postNotification(evt);
        }
	}*/

protected:
	// TODO: Your properties and change count go here, e.g.:

	/*String _label;
	int    _labelChangeCount = 0;*/
};

}
}

#endif