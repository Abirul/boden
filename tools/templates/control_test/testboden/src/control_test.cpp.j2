#include <bdn/init.h>
#include <bdn/test.h>

#include <bdn/{{name}}.h>
#include <bdn/test/testView.h>
#include <bdn/test/Mock{{name}}Core.h>

using namespace bdn;

TEST_CASE("{{name}}")
{
    // Test the generic view properties of {{name}}
    SECTION("View-base")
        bdn::test::testView<{{name}}>();

	SECTION("{{name}}-specific")
	{
		P<bdn::test::ViewTestPreparer<{{name}}> >         pPreparer = newObj< bdn::test::ViewTestPreparer<{{name}}> >();
		P< bdn::test::ViewWithTestExtensions<{{name}}> >  p{{name}} = pPreparer->createView();
		P<bdn::test::Mock{{name}}Core>                    pCore = cast<bdn::test::Mock{{name}}Core>( p{{name}}->getViewCore() );

		REQUIRE( pCore!=nullptr );

		SECTION("initial{{name}}State")
		{
			// TODO: insert initial state test for properties
			/*SECTION("label")
			{
				REQUIRE( p{{name}}->label() == "" );
				REQUIRE( pCore->getLabel()=="" );
				REQUIRE( pCore->getLabelChangeCount()==0 );
			}*/
		}

		SECTION("change{{name}}Property")
		{   
			// TODO: insert property change tests
			/*SECTION("label")
			{
				bdn::test::_testViewOp( 
					p{{name}},
                    pPreparer,
					[p{{name}}]()
					{
						p{{name}}->label() = "hello";					
					},
					[pCore, p{{name}}]
					{
						REQUIRE( pCore->getLabel()=="hello" );					
						REQUIRE( pCore->getLabelChangeCount()==1 );					
					},
                    (int)bdn::test::ExpectedSideEffect_::invalidateSizingInfo // should have caused sizing info to be invalidated
                    | (int)bdn::test::ExpectedSideEffect_::invalidateParentLayout // should cause a parent layout update since sizing info was invalidated					
					);
			}*/       
		}
	}	
}


