#ifndef BDN_WEBEMS_{{name}}Core_H_
#define BDN_WEBEMS_{{name}}Core_H_

#include <emscripten/html5.h>

#include <bdn/webems/ViewCore.h>
#include <bdn/I{{name}}Core.h>
#include <bdn/{{name}}.h>


namespace bdn
{
namespace webems
{


class {{name}}Core : public ViewCore, BDN_IMPLEMENTS I{{name}}Core
{
public:
    {{name}}Core({{name}}* pOuter{{name}})
    : ViewCore(pOuter{{name}},
               "{{nativeControlName}}")
    {
        emscripten_set_click_callback( _elementId.asUtf8Ptr(), this, false, _clickedCallback);

        // Set properties to initial states here
    }

    // Implement setters here    
    
    
protected:    

    bool _clicked(int eventType, const EmscriptenMouseEvent* pMouseEvent)
    {
        if(eventType==EMSCRIPTEN_EVENT_CLICK)
        {
            P<View> pView = getOuterViewIfStillAttached();
            if(pView!=nullptr)
            {
                ClickEvent evt( pView );            
                cast<{{name}}>(pView)->onClick().postNotification(evt);
            }
        }
        
        return false;
    }
    
    
    static EM_BOOL _clickedCallback(int eventType, const EmscriptenMouseEvent* pMouseEvent, void* pUserData)
    {
        return (({{name}}Core*)pUserData)->_clicked(eventType, pMouseEvent);
    }


    void setMozAppearanceNone(bool activateNone)
    {
        if(_mozAppearanceNoneSet!=activateNone)
        {
            emscripten::val styleObj = _domObject["style"];
            std::string appearance = activateNone ? "none" : "initial";
            styleObj.set("-moz-appearance",  appearance );
            _mozAppearanceNoneSet = activateNone;            
        }
    }

    void setDefaultPadding() override
    {
        ViewCore::setDefaultPadding();

        // we do not need to override the appearance anymore
        setMozAppearanceNone(false);
    }

    void setNonDefaultPadding(const Margin& padding) override
    {
        ViewCore::setNonDefaultPadding(padding);

        setMozAppearanceNone(true);
    }


    bool _mozAppearanceNoneSet = false;
};

}    
}

#endif
