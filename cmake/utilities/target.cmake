set(BODEN_AVAILABLE_TARGETS "linux;mac;win32;ios;android;winstore;winuwp;webems;unix" CACHE STRIGN "List of possible build targets")

# Auto detect target platform

if( IOS )
    set( BODEN_DETECTED_TARGET "ios" )
elseif( CMAKE_SYSTEM_NAME STREQUAL "Linux" )
    set( BODEN_DETECTED_TARGET "linux" )
elseif( CMAKE_SYSTEM_NAME STREQUAL "Darwin" )
    set( BODEN_DETECTED_TARGET "mac" )
elseif( ANDROID )
    set( BODEN_DETECTED_TARGET "android" )
elseif( CMAKE_SYSTEM_NAME STREQUAL "Windows" )
    set( BODEN_DETECTED_TARGET "win32" )
elseif( CMAKE_SYSTEM_NAME STREQUAL "WindowsStore" )
    if(CMAKE_SYSTEM_VERSION VERSION_LESS "10.0")
        message(FATAL_ERROR "Windows Store is only supported for Windows 10 and higher")
    else()
        set( BODEN_DETECTED_TARGET "winuwp" )
    endif()
elseif( CMAKE_SYSTEM_NAME STREQUAL "Emscripten" )
    set( BODEN_DETECTED_TARGET "webems" )
else()
    # assume some Unix variant
    set( BODEN_DETECTED_TARGET "unix" )
endif()

# Select target platform ( auto detect, or use users selection )

if(NOT BODEN_TARGET)
    set(BODEN_TARGET ${BODEN_DETECTED_TARGET})
endif()


# Global options based on selected platform

set(BODEN_USES_PTHREAD No )
set(BODEN_USES_FK No )
set(BODEN_USES_JAVA No )
set(BODEN_USES_GTK No )
set(BODEN_NEEDS_TO_BE_SHARED_LIBRARY No)
set(BODEN_NEEDS_TO_BE_STATIC_LIBRARY No)

set(BODEN_TARGET_IOS No)
set(BODEN_TARGET_MAC No)
set(BODEN_TARGET_ANDROID No)
set(BODEN_TARGET_LINUX No)
set(BODEN_TARGET_UNIX No)
set(BODEN_TARGET_WIN32 No)
set(BODEN_TARGET_WINUWP No)
set(BODEN_TARGET_WEBEMS No)

if(BODEN_TARGET STREQUAL "ios")
    set( BODEN_USES_PTHREAD Yes )
    set( BODEN_USES_FK Yes )
    set( BODEN_TARGET_FAMILY "posix")
    set( BODEN_NEEDS_TO_BE_STATIC_LIBRARY Yes )
	set( BODEN_TARGET_IOS Yes )
elseif(BODEN_TARGET STREQUAL "mac")
    set( BODEN_USES_PTHREAD Yes )
    set( BODEN_USES_FK Yes )
    set( BODEN_TARGET_FAMILY "posix")
	set( BODEN_TARGET_MAC Yes )
elseif(BODEN_TARGET STREQUAL "android")
    set( BODEN_USES_PTHREAD Yes )
    set( BODEN_USES_JAVA Yes )
    set( BODEN_TARGET_FAMILY "posix")
    set( BODEN_NEEDS_TO_BE_SHARED_LIBRARY Yes )
	set( BODEN_TARGET_ANDROID Yes )
elseif(BODEN_TARGET STREQUAL "linux")
    set( BODEN_USES_PTHREAD Yes )
    set( BODEN_USES_GTK Yes )
    set( BODEN_TARGET_FAMILY "posix")
	set( BODEN_TARGET_LINUX Yes )
elseif(BODEN_TARGET STREQUAL "unix")
    set( BODEN_USES_PTHREAD Yes )
    set( BODEN_TARGET_FAMILY "posix")
	set( BODEN_TARGET_UNIX Yes )
elseif(BODEN_TARGET STREQUAL "win32")
    set( BODEN_TARGET_FAMILY "windows")
	set( BODEN_TARGET_WIN32 Yes )
elseif(BODEN_TARGET STREQUAL "winuwp")
    set( BODEN_TARGET_FAMILY "windows")
    set( BODEN_NEEDS_TO_BE_SHARED_LIBRARY Yes)
	set( BODEN_TARGET_WINUWP Yes )
elseif(BODEN_TARGET STREQUAL "webems")
    set( BODEN_TARGET_WEBEMS Yes )
endif()

message(STATUS "Boden platform:")
message(STATUS "  Name: ${BODEN_TARGET}")
message(STATUS "  Family: ${BODEN_TARGET_FAMILY}")
message(STATUS "Boden configuration:")
message(STATUS "  Uses pthread: ${BODEN_USES_PTHREAD}")
message(STATUS "  Uses foundation kit: ${BODEN_USES_FK}")
message(STATUS "  Uses java: ${BODEN_USES_JAVA}")
message(STATUS "  Uses gtk: ${BODEN_USES_GTK}")
message(STATUS "  Force shared: ${BODEN_NEEDS_TO_BE_SHARED_LIBRARY}")
message(STATUS "  Force static: ${BODEN_NEEDS_TO_BE_STATIC_LIBRARY}")

# Make options globally available

set(BODEN_TARGET ${BODEN_TARGET} CACHE INTERNAL "Boden target name")
set(BODEN_TARGET_FAMILY ${BODEN_TARGET_FAMILY} CACHE INTERNAL "Boden target family")
set(BODEN_USES_PTHREAD ${BODEN_USES_PTHREAD} CACHE INTERNAL "Boden uses pthread")
set(BODEN_USES_FK ${BODEN_USES_FK} CACHE INTERNAL "Boden uses Foundation Kit")
set(BODEN_USES_JAVA ${BODEN_USES_JAVA} CACHE INTERNAL "Boden uses java")
set(BODEN_USES_GTK ${BODEN_USES_GTK} CACHE INTERNAL "Boden uses gtk")
set(BODEN_NEEDS_TO_BE_SHARED_LIBRARY ${BODEN_NEEDS_TO_BE_SHARED_LIBRARY} CACHE INTERNAL "boden needs to be a shared library")
set(BODEN_NEEDS_TO_BE_STATIC_LIBRARY ${BODEN_NEEDS_TO_BE_STATIC_LIBRARY} CACHE INTERNAL "boden needs to be a static library")

set(BODEN_TARGET_IOS     ${BODEN_TARGET_IOS} CACHE INTERNAL "")
set(BODEN_TARGET_MAC     ${BODEN_TARGET_MAC} CACHE INTERNAL "")
set(BODEN_TARGET_ANDROID ${BODEN_TARGET_ANDROID} CACHE INTERNAL "")
set(BODEN_TARGET_LINUX   ${BODEN_TARGET_LINUX} CACHE INTERNAL "")
set(BODEN_TARGET_UNIX    ${BODEN_TARGET_UNIX} CACHE INTERNAL "")
set(BODEN_TARGET_WIN32   ${BODEN_TARGET_WIN32} CACHE INTERNAL "")
set(BODEN_TARGET_WINUWP  ${BODEN_TARGET_WINUWP} CACHE INTERNAL "")
set(BODEN_TARGET_WEBEMS  ${BODEN_TARGET_WEBEMS} CACHE INTERNAL "")

set_property(CACHE BODEN_TARGET PROPERTY STRINGS ${BODEN_AVAILABLE_TARGETS})
mark_as_advanced(BODEN_AVAILABLE_TARGETS)

macro(add_universal_library TARGET)
    if(BODEN_TARGET_ANDROID)
        # Static libs don't work well on android at the moment due to problems in build.py with dependency generation
        add_library(${TARGET} SHARED ${ARGN})
    else()
        add_library(${TARGET} ${ARGN})
    endif()
endmacro()

macro(add_universal_executable TARGET CONSOLE_APP)
	if(BODEN_TARGET_IOS)
		add_executable(${TARGET} MACOSX_BUNDLE ${ARGN} )
	elseif(BODEN_TARGET_MAC)
		if(${CONSOLE_APP})
			add_executable(${TARGET} ${ARGN} )
		else()
			add_executable(${TARGET} MACOSX_BUNDLE ${ARGN} )
		endif()
	elseif(BODEN_TARGET_ANDROID)
        if(${BAUER_RUN})
		  add_executable(${TARGET} ${ARGN} )
        else()
          add_library(${TARGET} SHARED ${ARGN} )
        endif()
	elseif(BODEN_TARGET_LINUX)
		add_executable(${TARGET} ${ARGN} )
	elseif(BODEN_TARGET_UNIX)
		add_executable(${TARGET} ${ARGN} )
	elseif(BODEN_TARGET_WIN32)
    	if(${CONSOLE_APP})
			add_executable(${TARGET} ${ARGN} )
		else()
			add_executable(${TARGET} WIN32 ${ARGN} )
		endif()
	elseif(BODEN_TARGET_WINUWP)
			add_executable(${TARGET} WIN32 ${ARGN} )
	elseif(BODEN_TARGET_WEBEMS)
		add_executable(${TARGET} ${ARGN} )
	endif()

	if(${CONSOLE_APP})
		target_compile_definitions(${TARGET} PRIVATE "BDN_COMPILING_COMMANDLINE_APP")
	endif()

endmacro()
