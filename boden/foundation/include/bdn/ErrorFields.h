#ifndef BDN_ErrorFields_H_
#define BDN_ErrorFields_H_

#include <map>

namespace bdn
{


/** A container for name-value pairs that provide additional information about an error.

	See ErrorInfo.
*/
class ErrorFields : public Base, public std::map<String,String>
{
public:
	ErrorFields()
	{		
	}


	/** Initializes the fields from a string representation. The string must have been
		generated by ErrorFields::toString().*/
	ErrorFields(const String& fieldString);


	ErrorFields& add(const String& name, const String& value)
	{
		(*this)[name] = value;

		return *this;
	}

	String get(const String& name) const
	{
		auto it = find(name);
		if(it==end())
			return "";
		else
			return it->second;
	}

	bool contains(const String& name) const
	{
		return find(name)!=end();
	}

	
	/** Encodes the fields as a string.
		This string can be added to an error message.

		The returned string is designed to be reasonably human-readable.

		The strings returned by this function can be extracted and interpreted by ErrorInfo objects.
	
		If no fields have been added then the returned string will be empty.
		Otherwise the returned string will start with [[ and end with ]]. The ]] token will only
		occur at the end of the field string, so it can be used to find the end of an ErrorFields
		string within a bigger text block.
	*/
	String toString() const;


protected:
	static String escapeName(const String& name);
	static String escapeValue(const String& value);
	
	static String unescape(const String& value);

};
	

}

#endif
